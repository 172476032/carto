#!/usr/bin/env node

var path = require('path'),
    fs = require('fs'),
    sys = require('sys');

require.paths.unshift(path.join(__dirname, '../lib'), path.join(__dirname, '../lib/node'));

var carto = require('carto');
var args = process.argv.slice(1);
var options = {};

args = args.filter(function (arg) {
    var match;

    if (match = arg.match(/^--?([a-z][0-9a-z-]*)$/i)) { arg = match[1] }
    else { return arg }

    switch (arg) {
        case 'v':
        case 'version':
            sys.puts("carto " + carto.version.join('.') + " (Carto map stylesheet compiler)");
            process.exit(0);
            break;
        case 'b':
        case 'benchmark':
            options.benchmark = true;
            break;

        default:
            sys.puts("Usage: carto <source MML file>");
            sys.puts("Options:");
            sys.puts("  -v   --version      Parse JSON map manifest");
            sys.puts("  -b   --benchmark    Outputs total compile time");
            process.exit(0);
            break;
    }
});

var input = args[1];
if (input && input[0] != '/') {
    input = path.join(process.cwd(), input);
}

if (!input) {
    sys.puts("carto: no input files");
    process.exit(1);
}

if (options.benchmark) {
    var start = +new Date;
}

fs.readFile(input, 'utf-8', function (err, data) {
    if (err) {
        sys.puts("carto: " + err.message.replace(/^[A-Z]+, /, ''));
        process.exit(1);
    }

    new carto.Renderer({
        filename: input,
        benchmark: options.benchmark,
        local_data_dir: path.dirname(input),
    }).render(data, function(err, output) {
        if (err) {
            if (Array.isArray(err)) {
                err.forEach(function(e) {
                    carto.writeError(e, options);
                });
            } else {
                throw err;
            }

            process.exit(1);
        } else {
            if (!options.benchmark) {
                sys.puts(output);
            } else {
                var duration = (+new Date) - start;
                console.log('TOTAL: ' + (duration) + 'ms');
            }
        }
    });
});
