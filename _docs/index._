---
layout: docs
categories: api
version: <%= version %>
title: CartoCSS <%= version %>
navigation:
  - title: Map Elements
    subnav: <%= toc({symbolizers:symbolizers, _:_}) %>  - title: Values
  - title: Color
  - title: Float
  - title: URI
  - title: String
  - title: Boolean
  - title: Expressions
  - title: Numbers
  - title: Functions
---

{% if site.version != page.version %}
{% if page.version != 'latest' %}
<div class='note warning'>
  Viewing an older version of CartoCSS. Check out <a href='{{site.baseurl}}/api/{{site.version}}'>{{site.version}} for the latest</a>.
</div>
{% endif %}
{% endif %}
<h1 id='map-elements'>Map elements</h1>
<p>The following is a list of properties provided in CartoCSS that you can apply to map elements.</p>
<%= table({symbolizers:symbolizers, _:_}) %>

<h1 id='values'>Values</h1>
<p>Below is a list of values and an explanation of any expression that can be applied to properties in CartCSS.</p>

<h2 id='color'>Color</h2>
<p>CartoCSS accepts a variety of syntaxes for colors - HTML-style hex values,
rgb, rgba, and hsl. It also supports the predefined HTML colors names, like
<code>yellow</code> and <code>blue</code>.</p>

{% highlight css %}
#line {
line-color: #ff0;
line-color: #ffff00;
line-color: rgb(255, 255, 0);
line-color: rgba(255, 255, 0, 1);
line-color: hsl(100, 50%, 50%);
line-color: yellow;
}
{% endhighlight %}
<p>Especially of note is the support for hsl, which can be
<a href='http://mothereffinghsl.com/'>easier to reason about than rgb()</a>
<p>Carto also includes several color functions <a href='http://lesscss.org/#-color-functions'>borrowed from less</a>:</p>

{% highlight css %}
// lighten and darken colors
lighten(#ace, 10%);
darken(#ace, 10%);

// saturate and desaturate
saturate(#550000, 10%);
desaturate(#00ff00, 10%);

// increase or decrease the opacity of a color
fadein(#fafafa, 10%);
fadeout(#fefefe, 14%);

// spin rotates a color around the color wheel by degrees
spin(#ff00ff, 10);

// mix generates a color in between two other colors.
mix(#fff, #000, 50%);
{% endhighlight %}

<p>These functions all take arguments which can be color variables, literal colors,
or the results of other functions operating on colors.</p>

<h2 id='float'>Float</h2>
<p>Float is a fancy way of saying 'number'. In CartoCSS, you specify <em>just a number</em> -
unlike CSS, there are no units, but everything is specified in pixels.</p>
{% highlight css %}
#line {
line-width: 2;
}
{% endhighlight %}

<p>It's also possible to do simple math with number values:</p>

{% highlight css %}
#line {
line-width: 4 / 2; // division
line-width: 4 + 2; // addition
line-width: 4 - 2; // subtraction
line-width: 4 * 2; // multiplication
line-width: 4 % 2; // modulus
}
{% endhighlight %}

<h2 id='uri'>URI</h2>
<p>URI is a fancy way of saying URL. When an argument is a URI, you use the same kind of
<code>url('place.png')</code> notation that you would with HTML. Quotes around the URL
aren't required, but are highly recommended.</p>
<p>URIs can be paths to places on your computer, or on the internet.</p>
{% highlight css %}
#markers {
marker-file: url('marker.png');
}
{% endhighlight %}

<h2 id='string'>String</h2>
<p>A string is basically just text. In the case of CartoCSS, you're going to put it in quotes. Strings
can be anything, though pay attention to the cases of <code>text-name</code> and <code>shield-name</code> -
they actually will refer to features, which you refer to by putting them in brackets, as seen
in the example below.</p>
{% highlight html %}
#labels {
text-name: "[MY_FIELD]";
}
{% endhighlight %}

<h2 id='boolean'>Boolean</h2>
<p>Boolean means yes or no, so it accepts the values <code>true</code> or <code>false</code>.</p>
{% highlight css %}
#markers {
marker-allow-overlap:true;
}
{% endhighlight %}

<h2 id='expressions'>Expressions</h2>
<p>Expressions are statements that can include fields, numbers, and other
types in a really flexible way. You have run into expressions before,
in the realm of 'fields', where you'd specify <code>"[FIELD]"</code>,
but expressions allow you to drop the quotes and also do quick addition,
division, multiplication, and concatenation from within Carto syntax.</p>
{% highlight css %}
#buildings {
building-height: [HEIGHT_FIELD] * 10;
}
{% endhighlight %}

<h2 id='numbers'>Numbers</h2>
<p>Numbers are comma-separated lists of one or more number in a specific
order. They're used in line dash arrays, in which the numbers specify
intervals of line, break, and line again.</p>
{% highlight css %}
#disputedboundary {
line-dasharray: 1, 4, 2;
}
{% endhighlight %}

<h2 id='percentages'>Percentages</h2>
<p>In Carto, the percentage symbol, <code>%</code> universally means
<code>value/100</code>. It's meant to be used with ratio-related properties,
like opacity rules.

<div class='note'>
<p>You should not use percentages as widths, heights, or other properties - unlike CSS, percentages are not relative to cascaded classes or page size, they're, as stated, simply the value divided by one hundred.</p>
</div>

{% highlight css %}
#world {
// this syntax
polygon-opacity: 50%;

// is equivalent to
polygon-opacity: 0.5;
}
{% endhighlight %}

<h2 id='functions'>Functions</h2>
<p>Functions are comma-separated lists of one or more functions. For
instance, transforms use the <code>functions</code> type to allow
for transforms within Carto, which are optionally chainable.</p>

{% highlight css %}
#point {
point-transform: scale(2, 2);
}
{% endhighlight %}
